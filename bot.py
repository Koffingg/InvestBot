from main import Database
import telebot
from telebot import types
import matplotlib.pyplot as plt
import tinvest


# –¢–æ —á—Ç–æ –∫–∞—Å–∞–µ—Ç—Å—è –±–æ—Ç–∞
TOKEN = "5259140715:AAGHkZ42Ty1UPd5ate3NUURr4MP3c_1o6MU"
bot = telebot.TeleBot(TOKEN)

counter_for_create_table = 1


@bot.message_handler(commands=['start'])
def start_bot(message):
    global counter_for_create_table
    db = Database('users.db')
    if counter_for_create_table == 1:
        db.create_table()
        counter_for_create_table += 1
    keyboards_start = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1_stock = types.KeyboardButton(text='–ê–∫—Ü–∏–∏')
    btn2_etf = types.KeyboardButton(text='–§–æ–Ω–¥—ã')
    btn3_currency = types.KeyboardButton(text='–í–∞–ª—é—Ç—ã')
    keyboards_start.add(btn1_stock, btn2_etf, btn3_currency)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name} \n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã "
                                      f"–Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω.",
                     reply_markup=keyboards_start)
    help_user(message)


# –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, —Ç–æ –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
@bot.message_handler(commands=['token'])
def help_user(message):
    keyboard_under_msg = types.InlineKeyboardMarkup()
    keyboard_under_msg.add(types.InlineKeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ —Ç–æ–∫–µ–Ω",
                                                      url="https://www.tinkoff.ru/invest/"))
    msg = bot.send_message(message.chat.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ:\n1) –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n2) –ü–µ—Ä–µ–π—Ç–∏ –≤ '
                                            '—Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"\n3) –ü—Ä–æ–ª–∏—Å—Ç–∞—Ç—å –≤–Ω–∏–∑ –¥–æ —Ä–∞–∑–¥–µ–ª–∞ "–¢–æ–∫–µ–Ω—ã Tinkoff Invest '
                                            'API" –∏ –Ω–∞–∂–∞—Ç—å "–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω"\n4) –í —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è '
                                            '–≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–∞–ª–æ—á–∫—É –≤ –ø–æ–ª–µ "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø" –∏ –Ω–∞–∂–∞—Ç—å '
                                            '"–í—ã–ø—É—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω"\n5) –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –≤ —á–∞—Ç-–±–æ—Ç',
                           reply_markup=keyboard_under_msg)
    bot.register_next_step_handler(msg, setter_token_users)


"""–¢—É—Ç —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""


def setter_token_users(message):
    db = Database('users.db')
    if message.text[:2] != 't.':
        bot.send_message(message.chat.id, '–í—ã –≥–¥–µ-—Ç–æ –æ—à–∏–±–ª–∏—Å—å!\n–î–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–∫–µ–Ω–æ–º\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ '
                                          '\"/token\"')
    else:
        counter = db.add_user(message.from_user.id, message.from_user.first_name, message.text)
        if counter:
            bot.send_message(message.chat.id, '–í–∞—à —Ç–æ–∫–µ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ωüëç')
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!üö´')


# –ö–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—è –µ–≥–æ —Ö–æ—á–µ—Ç –æ–Ω —ç—Ç–æ–≥–æ –∏–ª–∏ –Ω–µ—Ç
@bot.message_handler(commands=['delete'], content_types=['text'])
def delete_user(message):
    msg = bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω?")
    bot.register_next_step_handler(msg, text_for_delete_user)  # –ø–µ—Ä–µ–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –≥–¥–µ –º—ã –ø–æ–ª—É—á–∏–º –æ—Ç–≤–µ—Ç
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


"""–í—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∞–∫—Ü–∏–π"""


def print_stock(message):
    db = Database('users.db')
    user_token = db.get_token(message.from_user.id)

    person = tinvest.SyncClient(user_token)
    positions = person.get_portfolio()

    labels = []
    values = []

    for pos in positions.payload.positions:
        if pos.instrument_type == 'Stock':
            labels.append(pos.name)
            values.append(pos.balance)
            bot.send_message(message.chat.id,
                             f'–ê–∫—Ü–∏—è: {pos.name}\n–°–∫–æ–ª—å–∫–æ –∫—É–ø–ª–µ–Ω–æ: {pos.balance}\n–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è '
                             f'–∞–∫—Ü–∏—è:'
                             f' {pos.average_position_price.currency}\n–¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –∞–∫—Ü–∏–∏: '
                             f'{pos.average_position_price.value}')

    if len(labels) != 0 and len(values) != 0:
        plt.title('–ê–∫—Ü–∏–∏ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ')
        plt.pie(values, labels=labels, shadow=True, autopct='%1.1f%%', startangle=180)
        plt.axis('equal')
        plt.savefig(f'plot{message.chat.id}.png')
        plt.clf()
        plt.close()
        bot.send_photo(message.chat.id, photo=open(f'plot{message.chat.id}.png', 'rb'))
        os.remove(f'plot{message.chat.id}.png')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–∫—Ü–∏–∏!')


"""–í—ã–≤–æ–¥ –≤–∞–ª—é—Ç"""


def print_currency(message):
    db = Database('users.db')
    user_token = db.get_token(message.from_user.id)

    person = tinvest.SyncClient(user_token)
    positions = person.get_portfolio()

    labels = []
    values = []

    for pos in positions.payload.positions:
        if pos.instrument_type == 'Currency':
            values.append(pos.balance)
            labels.append(pos.name)
            bot.send_message(message.chat.id,
                             f'–í–∞–ª—é—Ç–∞: {pos.name}\n–ë–∞–ª–∞–Ω—Å –≤ —ç—Ç–æ–π –≤–∞–ª—é—Ç–µ: {pos.balance}\n–í —á—ë–º —Ö—Ä–∞–Ω–∏—Ç—Å—è '
                             f'–≤–∞–ª—é—Ç–∞:'
                             f' {pos.average_position_price.currency}\n–¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã: '
                             f'{pos.average_position_price.value}')

    if len(labels) != 0 and len(values) != 0:
        plt.title('–í–∞–ª—é—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ')
        plt.pie(values, labels=labels, shadow=True, autopct='%1.1f%%', startangle=180)
        plt.axis('equal')
        plt.savefig(f'plot{message.chat.id}.png')
        plt.clf()
        plt.close()
        bot.send_photo(message.chat.id, photo=open(f'plot{message.chat.id}.png', 'rb'))
        os.remove(f'plot{message.chat.id}.png')
    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–ª—é—Ç–∞!')


"""–í—ã–≤–æ–¥ —Ñ–æ–Ω–¥–æ–≤"""


def print_etf(message):
    db = Database('users.db')
    user_token = db.get_token(message.from_user.id)

    person = tinvest.SyncClient(user_token)
    positions = person.get_portfolio()

    labels = []
    values = []

    for pos in positions.payload.positions:
        if pos.instrument_type == 'Etf':
            labels.append(pos.name)
            values.append(pos.balance)
            bot.send_message(message.chat.id,
                             f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–∞: {pos.name}\n–°–∫–æ–ª—å–∫–æ –∫—É–ø–ª–µ–Ω–æ —Ñ–æ–Ω–¥–æ–≤: {pos.balance}\n–í –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è '
                             f'—Ñ–æ–Ω–¥:'
                             f' {pos.average_position_price.currency}\n–¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ —Ñ–æ–Ω–¥–∞: '
                             f'{pos.average_position_price.value}')

    if len(labels) != 0 and len(values) != 0:
        plt.title('–§–æ–Ω–¥—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ')
        plt.pie(values, labels=labels, shadow=True, autopct='%1.1f%%', startangle=180)
        plt.axis('equal')
        plt.savefig(f'plot{message.chat.id}.png')
        plt.clf()
        plt.close()
        bot.send_photo(message.chat.id, photo=open(f'plot{message.chat.id}.png', 'rb'))
        os.remove(f'plot{message.chat.id}.png')

    else:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ–Ω–¥—ã!')


"""–¢—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–æ–¥—è—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç"""


def check_currency_dollar():
    url_dollar = "https://clck.ru/pLS2o"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)"
                             " Chrome/101.0.4951.67 Safari/537.36"}
    response = requests.get(url=url_dollar, headers=headers)
    soup = BeautifulSoup(response.text, "lxml")  # –ø—Ä–∏–≤–æ–¥–∏–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—á–∫–∏ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = soup.find("div", class_="dDoNo ikb4Bb gsrt")  # –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É –∏ –∫–ª–∞—Å—Å—É
    course_dollar = data.find("span", class_="DFlfde SwHCTb").text
    return course_dollar


def check_currency_euro():
    url_euro = "https://clck.ru/pLxdN"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)"
                             " Chrome/101.0.4951.67 Safari/537.36"}
    response = requests.get(url=url_euro, headers=headers)
    soup = BeautifulSoup(response.text, "lxml")
    data = soup.find("div", class_="dDoNo ikb4Bb gsrt")
    course_euro = data.find("span", class_="DFlfde SwHCTb").text
    return course_euro


# –ó–¥–µ—Å—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∫–∞–∫-—Ç–æ –≤—ã–∑—ã–≤–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏
@bot.message_handler(content_types=['text'])
def user_responses(message):
    db = Database('users.db')
    if db.user_presence(message.from_user.id):
        if message.text.lower() == '–∫—É—Ä—Å—ã –≤–∞–ª—é—Ç':
            keyboards_under_text = types.InlineKeyboardMarkup()
            btn1_under_text = types.InlineKeyboardButton("–î–æ–ª–ª–∞—Ä", callback_data='–î–æ–ª–ª–∞—Ä')
            btn2_under_text = types.InlineKeyboardButton("–ï–≤—Ä–æ", callback_data='–ï–≤—Ä–æ')
            keyboards_under_text.add(btn1_under_text, btn2_under_text)
            bot.send_message(message.chat.id, '–ö—É—Ä—Å –∫–∞–∫–æ–π –∏–∑ –≤–∞–ª—é—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?',
                             reply_markup=keyboards_under_text)
        if message.text.lower() == '–∞–∫—Ü–∏–∏':
            print_stock(message)
        if message.text.lower() == '–≤–∞–ª—é—Ç—ã':
            print_currency(message)
        if message.text.lower() == '—Ñ–æ–Ω–¥—ã':
            print_etf(message)
    else:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–¥–∏—Ç–µ –µ–º—É —Å–≤–æ–π '
                                          '—Ç–æ–∫–µ–Ω\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π - /token')


counter_for_alert = 0


# –≠—Ç–æ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
@bot.callback_query_handler(func=lambda call: True)  # –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç
def response_to_buttons(call):
    global counter_for_alert
    db = Database('users.db')
    if call.data == "–î–æ–ª–ª–∞—Ä":
        bot.send_message(call.message.chat.id, f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - {check_currency_dollar()} —Ä—É–±.')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"{call.data}",
                              reply_markup=None)  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –µ—ë –≤—ã–±–æ—Ä–∞
    if call.data == "–ï–≤—Ä–æ":
        bot.send_message(call.message.chat.id, f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - {check_currency_euro()} —Ä—É–±.')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"{call.data}",
                              reply_markup=None)  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –µ—ë –≤—ã–±–æ—Ä–∞
    if call.data == "–í—ã –≤–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!":
        token_user = db.get_token(call.message.chat.id)
        if db.check_alert_user(token_user):
            bot.send_message(call.message.chat.id, "–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          reply_markup=None)
        else:
            db.enable_alert_for_user(token_user)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"{call.data}",
                                  reply_markup=None)  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –µ—ë –≤—ã–±–æ—Ä–∞
            counter_for_alert += 1
            if counter_for_alert == 1:
                while True:
                    schedule.run_pending()
                    time.sleep(30)
    if call.data == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã!":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"{call.data}",
                              reply_markup=None)  # —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –µ—ë –≤—ã–±–æ—Ä–∞
    if call.data == "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!":
        user_token = db.get_token(call.message.chat.id)
        db.turn_off_alert(user_token)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"{call.data}",
                              reply_markup=None)
    # bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)


try:
    bot.infinity_polling()
except tinvest.exceptions.UnexpectedError:
    print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥–∞–ª –Ω–µ —Ç–æ—Ç —Ç–æ–∫–µ–Ω')
"""–≠—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è"""
# sql.execute('DELETE FROM name_and_token WHERE name = ?', ('Gleb',))
